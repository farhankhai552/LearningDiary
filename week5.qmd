# Week 5: Google Earth Engine (GEE)

## **Part 1: what GEE is and basic components**

**What is it?**

-   "Geospatial" processing service that renders a 3D representation of Earth based primarily on satellite imagery. 

-   The program maps the Earth by superimposing satellite images, aerial photography, and GIS data onto a 3D globe, allowing users to see cities and landscapes from various angles.

-   Permits geospatial analysis at scale (meaning; planetary scale analysis using massive datasets within seconds)\

**GEE terms**

-   Image = raster (has bands)

-   Image stack (stack of images) = ImageCollection

-   Feature = vector (has geometry and attributes)

-   Feature stack (lots of polygons) = FeatureCollection

Client vs Server side

-   Client = collects user input

-   Server = processes user input

-   Some code runs on server side, some code runs on client side

Scale

-   Refers to pixel resolution

-   Scale is set by output, not input

Projections

-   GEE converts all data into EPSG: 3587 when displayed

Loops and Mapping

![](https://andrewmaclachlan.github.io/CASA0023-lecture-5/img/GEE_object_classes.png)

## **Part 2: How to use GEE**

**Components of GEE**

-   Objects 

    -   includes vector, raster, feature, string, number

    -   Each object belongs to a class

    -   Each class has a specific function within GEE (also known as methods)

-   Geometry = point/line/polygon with no attributes

-   Feature = geometry with attributes

-   Feature collection = several features with attributes

**GEE functions and tools**

-   Loading image collections

-   Reducing images (by region, regions, or neighbourhoods)

    -   To summarise collection of images into one image composite

    -   Reduction methods include: median, region, neighbourhood, linear regression

        -   With median = median value of each pixel is used to make image composite

        -   By region = useful for conducting statistical analysis on a single area

        -   By neighbourhood = kernel neighbourhood is used to reduce image (as opposed to region boundary). Mean/min/max value of neighbour pixels surrounding central pixel are calculated

        -   Linear regression = to determine change in pixel values over time

-   Joins and filtering\

**Applications**

-   Environmental monitoring: GEE has several tools for analysing and monitoring the environment, such as mapping deforestation, identifying areas at risk of drought or flooding, tracking wildlife, and monitoring the effects of climate change.

-   LULC: can be used to map and monitor crop growth, track land use changes, and help with precision farming. By using satellite imagery and machine learning algorithms, it can provide detailed information about soil moisture, vegetation health, and other key variables.

-   Disaster Response and Mitigation: During natural disasters, GEEcan be used to quickly generate maps and identify areas at risk. It can also be used to monitor ongoing disasters, track the spread of wildfires, and assess damage after the event. This can help first responders and relief organisations allocate resources more effectively.

-   Urban Planning: GEE can help urban planners and policymakers make informed decisions about where to build infrastructure and how to manage resources. For example, it can be used to analyse traffic patterns, identify areas at risk of flooding, and monitor urbanisation trends.\

**Reflection**

-   GEE contains a wealth of geospatial data to be used for free. This helps democratise the process of remote sensing. The terminal is also user-friendly and allows for beginners to extract remotely sensed data with ease.

-   Scalability capabilities of GEE are incredibly useful when dealing with large datasets

-   Cost effectiveness of GEE and its user-friendliness helps with introducing remote sensing methods to the masses.

-   Ultimately, the process behind interpreting remotely sensed data is the same in terms of technique, and usually only differs in name. This streamlines the process of understanding how to code better. If you understand one way to do it, it won't be difficult for you to understand how other methods are carried out as the core aspects remain similar.
